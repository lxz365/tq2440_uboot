<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\sdram-jlink\u_boot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\sdram-jlink\u_boot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Sun Nov 09 17:20:38 2014
<BR><P>
<H3>Maximum Stack Usage =       6856 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
do_bootp &rArr; netboot_common &rArr; NetLoop &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[52]">_start</a>
 <LI><a href="#[a]">start_code</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[76]">__asm___11_boot_init_c_df48103e__delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">__asm___11_boot_init_c_df48103e__delay</a><BR>
 <LI><a href="#[f]">serial_putc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">serial_putc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">BootpHandler</a> from bootp.o(.text) referenced from bootp.o(.text)
 <LI><a href="#[1e]">BootpTimeout</a> from bootp.o(.text) referenced from bootp.o(.text)
 <LI><a href="#[25]">NfsHandler</a> from nfs.o(.text) referenced from nfs.o(.text)
 <LI><a href="#[24]">NfsTimeout</a> from nfs.o(.text) referenced from nfs.o(.text)
 <LI><a href="#[27]">RarpHandler</a> from rarp.o(.text) referenced from rarp.o(.text)
 <LI><a href="#[26]">RarpTimeout</a> from rarp.o(.text) referenced from rarp.o(.text)
 <LI><a href="#[23]">TftpHandler</a> from tftp.o(.text) referenced from tftp.o(.text)
 <LI><a href="#[22]">TftpTimeout</a> from tftp.o(.text) referenced from tftp.o(.text)
 <LI><a href="#[33]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[32]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[31]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[52]">_start</a> from start.o(start) referenced 2 times from start.o(start)
 <LI><a href="#[e4]">adler32</a> from zlib.o(.text) referenced from zlib.o(.text)
 <LI><a href="#[35]">board_init</a> from tq2440.o(.text) referenced from board.o(.data)
 <LI><a href="#[3a]">console_init_f</a> from console.o(.text) referenced from board.o(.data)
 <LI><a href="#[34]">cpu_init</a> from cpu.o(.text) referenced from board.o(.data)
 <LI><a href="#[3b]">display_banner</a> from board.o(.text) referenced from board.o(.data)
 <LI><a href="#[3d]">display_dram_config</a> from board.o(.text) referenced from board.o(.data)
 <LI><a href="#[29]">dm9000_inblk_16bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[2c]">dm9000_inblk_32bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[2f]">dm9000_inblk_8bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[28]">dm9000_outblk_16bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[2b]">dm9000_outblk_32bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[2e]">dm9000_outblk_8bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[2a]">dm9000_rx_status_16bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[2d]">dm9000_rx_status_32bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[30]">dm9000_rx_status_8bit</a> from dm9000x.o(.text) referenced from dm9000x.o(.text)
 <LI><a href="#[51]">do_boot_zimage</a> from cmd_boot_zimage.o(.text) referenced from cmd_boot_zimage.o(.u_boot_cmd)
 <LI><a href="#[1d]">do_bootd</a> from cmd_bootm.o(.text) referenced from main.o(.text)
 <LI><a href="#[1d]">do_bootd</a> from cmd_bootm.o(.text) referenced 2 times from cmd_bootm.o(.u_boot_cmd)
 <LI><a href="#[3e]">do_bootm</a> from cmd_bootm.o(.text) referenced from cmd_bootm.o(.u_boot_cmd)
 <LI><a href="#[43]">do_bootp</a> from cmd_net.o(.text) referenced from cmd_net.o(.u_boot_cmd)
 <LI><a href="#[4c]">do_echo</a> from command.o(.text) referenced from command.o(.u_boot_cmd)
 <LI><a href="#[4f]">do_flerase</a> from cmd_flash.o(.text) referenced from cmd_flash.o(.u_boot_cmd)
 <LI><a href="#[4e]">do_flinfo</a> from cmd_flash.o(.text) referenced from cmd_flash.o(.u_boot_cmd)
 <LI><a href="#[41]">do_go</a> from cmd_boot.o(.text) referenced from cmd_boot.o(.u_boot_cmd)
 <LI><a href="#[4d]">do_help</a> from command.o(.text) referenced 2 times from command.o(.u_boot_cmd)
 <LI><a href="#[3f]">do_iminfo</a> from cmd_bootm.o(.text) referenced from cmd_bootm.o(.u_boot_cmd)
 <LI><a href="#[40]">do_imls</a> from cmd_bootm.o(.text) referenced from cmd_bootm.o(.u_boot_cmd)
 <LI><a href="#[46]">do_nfs</a> from cmd_net.o(.text) referenced from cmd_net.o(.u_boot_cmd)
 <LI><a href="#[47]">do_printenv</a> from cmd_nvedit.o(.text) referenced from cmd_nvedit.o(.u_boot_cmd)
 <LI><a href="#[50]">do_protect</a> from cmd_flash.o(.text) referenced from cmd_flash.o(.u_boot_cmd)
 <LI><a href="#[45]">do_rarpb</a> from cmd_net.o(.text) referenced from cmd_net.o(.u_boot_cmd)
 <LI><a href="#[42]">do_reset</a> from cpu.o(.text) referenced from cmd_boot.o(.u_boot_cmd)
 <LI><a href="#[4a]">do_run</a> from main.o(.text) referenced from cmd_nvedit.o(.u_boot_cmd)
 <LI><a href="#[49]">do_saveenv</a> from cmd_nvedit.o(.text) referenced from cmd_nvedit.o(.u_boot_cmd)
 <LI><a href="#[48]">do_setenv</a> from cmd_nvedit.o(.text) referenced from cmd_nvedit.o(.u_boot_cmd)
 <LI><a href="#[44]">do_tftpb</a> from cmd_net.o(.text) referenced from cmd_net.o(.u_boot_cmd)
 <LI><a href="#[4b]">do_version</a> from command.o(.text) referenced from command.o(.u_boot_cmd)
 <LI><a href="#[3c]">dram_init</a> from tq2440.o(.text) referenced from board.o(.data)
 <LI><a href="#[13]">dummy</a> from exports.o(.text) referenced from exports.o(.text)
 <LI><a href="#[37]">env_init</a> from env_flash.o(.text) referenced from board.o(.data)
 <LI><a href="#[d]">falloc</a> from zlib.o(.text) referenced from zlib.o(.text)
 <LI><a href="#[e]">ffree</a> from zlib.o(.text) referenced from zlib.o(.text)
 <LI><a href="#[15]">free</a> from h1_free.o(.text) referenced from exports.o(.text)
 <LI><a href="#[18]">get_timer</a> from s3c24x0_interrupts.o(.text) referenced from exports.o(.text)
 <LI><a href="#[156]">get_version</a> from exports.o(.text) referenced from exports.o(.text)
 <LI><a href="#[16]">getenv</a> from cmd_nvedit.o(.text) referenced from exports.o(.text)
 <LI><a href="#[38]">init_baudrate</a> from board.o(.text) referenced from board.o(.data)
 <LI><a href="#[36]">interrupt_init</a> from s3c24x0_interrupts.o(.text) referenced from board.o(.data)
 <LI><a href="#[14]">malloc</a> from h1_alloc.o(.text) referenced from exports.o(.text)
 <LI><a href="#[af]">printf</a> from console.o(.text) referenced from console.o(.text)
 <LI><a href="#[11]">serial_getc</a> from s3c24x0_serial.o(.text) referenced from devices.o(.text)
 <LI><a href="#[39]">serial_init</a> from s3c24x0_serial.o(.text) referenced from board.o(.data)
 <LI><a href="#[f]">serial_putc</a> from s3c24x0_serial.o(.text) referenced from devices.o(.text)
 <LI><a href="#[10]">serial_puts</a> from s3c24x0_serial.o(.text) referenced from devices.o(.text)
 <LI><a href="#[12]">serial_tstc</a> from s3c24x0_serial.o(.text) referenced from devices.o(.text)
 <LI><a href="#[17]">setenv</a> from cmd_nvedit.o(.text) referenced from exports.o(.text)
 <LI><a href="#[1b]">simple_strtol</a> from vsprintf.o(.text) referenced from exports.o(.text)
 <LI><a href="#[19]">simple_strtoul</a> from vsprintf.o(.text) referenced from exports.o(.text)
 <LI><a href="#[21]">startAgainHandler</a> from net.o(.text) referenced from net.o(.text)
 <LI><a href="#[20]">startAgainTimeout</a> from net.o(.text) referenced from net.o(.text)
 <LI><a href="#[c]">start_armboot</a> from board.o(.text) referenced from start.o(start)
 <LI><a href="#[a]">start_code</a> from start.o(start) referenced 7 times from start.o(start)
 <LI><a href="#[1c]">strcmp</a> from string.o(.text) referenced from exports.o(.text)
 <LI><a href="#[1a]">udelay</a> from s3c24x0_interrupts.o(.text) referenced from exports.o(.text)
 <LI><a href="#[173]">zalloc</a> from gunzip.o(.text) referenced from gunzip.o(.text)
 <LI><a href="#[174]">zfree</a> from gunzip.o(.text) referenced from gunzip.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[54]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[1e9]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[56]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[58]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5a]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5b]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5c]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>

<P><STRONG><a name="[212]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[5e]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[60]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[62]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[64]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[66]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[68]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[69]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[6a]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[6c]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[213]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[6e]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[70]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[72]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[74]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[214]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[76]"></a>__asm___11_boot_init_c_df48103e__delay</STRONG> (ARM, 8 bytes, Stack size 0 bytes, boot_init.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_boot_init_c_df48103e__delay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_boot_init_c_df48103e__delay
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[215]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[216]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[217]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[218]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[34]"></a>cpu_init</STRONG> (ARM, 8 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>cleanup_before_linux</STRONG> (ARM, 44 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cleanup_before_linux
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
</UL>

<P><STRONG><a name="[42]"></a>do_reset</STRONG> (ARM, 44 bytes, Stack size 24 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = do_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_cpu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_boot.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[7c]"></a>icache_enable</STRONG> (ARM, 32 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icache_enable &rArr; write_p15_c1
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_delay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_p15_c1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hword
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[7e]"></a>icache_disable</STRONG> (ARM, 32 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icache_disable &rArr; write_p15_c1
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_delay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_p15_c1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hword
</UL>

<P><STRONG><a name="[7f]"></a>icache_status</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icache_status
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hword
</UL>

<P><STRONG><a name="[80]"></a>dcache_enable</STRONG> (ARM, 32 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcache_enable &rArr; write_p15_c1
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_delay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_p15_c1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[81]"></a>dcache_disable</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_delay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_p15_c1
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_p15_c1
</UL>

<P><STRONG><a name="[82]"></a>dcache_status</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_p15_c1
</UL>

<P><STRONG><a name="[86]"></a>get_FCLK</STRONG> (ARM, 20 bytes, Stack size 8 bytes, speed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = get_FCLK &rArr; get_PLLCLK &rArr; hang &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PLLCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PCLK
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_HCLK
</UL>

<P><STRONG><a name="[87]"></a>get_HCLK</STRONG> (ARM, 252 bytes, Stack size 24 bytes, speed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = get_HCLK &rArr; get_FCLK &rArr; get_PLLCLK &rArr; hang &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_FCLK
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PCLK
</UL>

<P><STRONG><a name="[88]"></a>get_PCLK</STRONG> (ARM, 292 bytes, Stack size 32 bytes, speed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = get_PCLK &rArr; get_HCLK &rArr; get_FCLK &rArr; get_PLLCLK &rArr; hang &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_HCLK
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_FCLK
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_setbrg
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
</UL>

<P><STRONG><a name="[89]"></a>get_UCLK</STRONG> (ARM, 20 bytes, Stack size 8 bytes, speed.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PLLCLK
</UL>

<P><STRONG><a name="[36]"></a>interrupt_init</STRONG> (ARM, 136 bytes, Stack size 16 bytes, s3c24x0_interrupts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = interrupt_init &rArr; get_PCLK &rArr; get_HCLK &rArr; get_FCLK &rArr; get_PLLCLK &rArr; hang &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PCLK
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>reset_timer_masked</STRONG> (ARM, 36 bytes, Stack size 8 bytes, s3c24x0_interrupts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TIMER
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hword
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer
</UL>

<P><STRONG><a name="[8c]"></a>reset_timer</STRONG> (ARM, 16 bytes, Stack size 8 bytes, s3c24x0_interrupts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer_masked
</UL>

<P><STRONG><a name="[8d]"></a>get_timer_masked</STRONG> (ARM, 132 bytes, Stack size 8 bytes, s3c24x0_interrupts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_TIMER
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hword
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay_masked
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
</UL>

<P><STRONG><a name="[18]"></a>get_timer</STRONG> (ARM, 24 bytes, Stack size 8 bytes, s3c24x0_interrupts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_masked
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpTimeoutCheck
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[219]"></a>set_timer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, s3c24x0_interrupts.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>udelay</STRONG> (ARM, 100 bytes, Stack size 16 bytes, s3c24x0_interrupts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_masked
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_srom_word
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_srom_word
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_reset
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortboot
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>udelay_masked</STRONG> (ARM, 148 bytes, Stack size 24 bytes, s3c24x0_interrupts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = udelay_masked &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_masked
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[8f]"></a>get_ticks</STRONG> (ARM, 24 bytes, Stack size 8 bytes, s3c24x0_interrupts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
</UL>

<P><STRONG><a name="[21a]"></a>get_tbclk</STRONG> (ARM, 8 bytes, Stack size 0 bytes, s3c24x0_interrupts.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>reset_cpu</STRONG> (ARM, 44 bytes, Stack size 0 bytes, s3c24x0_interrupts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reset
</UL>

<P><STRONG><a name="[90]"></a>serial_setbrg</STRONG> (ARM, 120 bytes, Stack size 24 bytes, s3c24x0_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = serial_setbrg &rArr; get_PCLK &rArr; get_HCLK &rArr; get_FCLK &rArr; get_PLLCLK &rArr; hang &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S3C24X0_GetBase_UART
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PCLK
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>

<P><STRONG><a name="[39]"></a>serial_init</STRONG> (ARM, 20 bytes, Stack size 8 bytes, s3c24x0_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; serial_setbrg &rArr; get_PCLK &rArr; get_HCLK &rArr; get_FCLK &rArr; get_PLLCLK &rArr; hang &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_setbrg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>serial_getc</STRONG> (ARM, 48 bytes, Stack size 8 bytes, s3c24x0_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S3C24X0_GetBase_UART
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devices.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>serial_putc</STRONG> (ARM, 68 bytes, Stack size 16 bytes, s3c24x0_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S3C24X0_GetBase_UART
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_puts
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devices.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>serial_tstc</STRONG> (ARM, 32 bytes, Stack size 8 bytes, s3c24x0_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_tstc
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S3C24X0_GetBase_UART
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tstc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devices.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>serial_puts</STRONG> (ARM, 40 bytes, Stack size 8 bytes, s3c24x0_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devices.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>do_getc</STRONG> (ARM, 188 bytes, Stack size 32 bytes, s3c24x0_serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S3C24X0_GetBase_UART
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awaitkey2
</UL>

<P><STRONG><a name="[93]"></a>awaitkey2</STRONG> (ARM, 32 bytes, Stack size 16 bytes, s3c24x0_serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getc
</UL>

<P><STRONG><a name="[a4]"></a>nand_init_ll</STRONG> (ARM, 36 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCode2Ram
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NF_ReadID
</UL>

<P><STRONG><a name="[a5]"></a>NF_ReadID</STRONG> (ARM, 140 bytes, Stack size 32 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init_ll
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_deselect_chip
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_select_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCode2Ram
</UL>

<P><STRONG><a name="[a6]"></a>nand_read_ll</STRONG> (ARM, 328 bytes, Stack size 40 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_addr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_deselect_chip
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_select_chip
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCode2Ram
</UL>

<P><STRONG><a name="[a7]"></a>nand_read_ll_lp</STRONG> (ARM, 412 bytes, Stack size 48 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_addr_lp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_deselect_chip
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_select_chip
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCode2Ram
</UL>

<P><STRONG><a name="[a9]"></a>bBootFrmNORFlash</STRONG> (ARM, 52 bytes, Stack size 0 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyCode2Ram
</UL>

<P><STRONG><a name="[a8]"></a>CopyCode2Ram</STRONG> (ARM, 168 bytes, Stack size 32 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bBootFrmNORFlash
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll_lp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NF_ReadID
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init_ll
</UL>

<P><STRONG><a name="[53]"></a>clock_init</STRONG> (ARM, 76 bytes, Stack size 16 bytes, boot_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_boot_init_c_df48103e__delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_code
</UL>

<P><STRONG><a name="[21b]"></a>LED_init</STRONG> (ARM, 64 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>LED1_on</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>LED1_off</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>LED2_on</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>LED2_off</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>LED3_on</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>LED3_off</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>LED4_on</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>LED4_off</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tq2440.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>board_init</STRONG> (ARM, 220 bytes, Stack size 8 bytes, tq2440.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = board_init &rArr; dcache_enable &rArr; write_p15_c1
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcache_enable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>dram_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, tq2440.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>flash_init</STRONG> (ARM, 416 bytes, Stack size 24 bytes, tq2440_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = flash_init &rArr; panic &rArr; vprintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[ae]"></a>flash_print_info</STRONG> (ARM, 540 bytes, Stack size 16 bytes, tq2440_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = flash_print_info &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flinfo
</UL>

<P><STRONG><a name="[b1]"></a>flash_erase</STRONG> (ARM, 580 bytes, Stack size 48 bytes, tq2440_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = flash_erase &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupts
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay_masked
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_masked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer_masked
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupts
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_status
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_erase
</UL>

<P><STRONG><a name="[b5]"></a>write_buff</STRONG> (ARM, 400 bytes, Stack size 56 bytes, tq2440_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_buff &rArr; write_hword &rArr; icache_disable &rArr; write_p15_c1
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hword
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[b7]"></a>crc32</STRONG> (ARM, 252 bytes, Stack size 0 bytes, crc32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_hcrc
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_wd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_crc_update
</UL>

<P><STRONG><a name="[b6]"></a>crc32_wd</STRONG> (ARM, 52 bytes, Stack size 20 bytes, crc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc32_wd
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_dcrc
</UL>

<P><STRONG><a name="[b8]"></a>display_options</STRONG> (ARM, 28 bytes, Stack size 8 bytes, display_options.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[b9]"></a>print_size</STRONG> (ARM, 196 bytes, Stack size 32 bytes, display_options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_flash_config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_dram_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_print_size
</UL>

<P><STRONG><a name="[ba]"></a>print_buffer</STRONG> (ARM, 476 bytes, Stack size 104 bytes, display_options.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[bd]"></a>__div64_32</STRONG> (ARM, 264 bytes, Stack size 56 bytes, div64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[224]"></a>lmb_dump_all</STRONG> (ARM, 4 bytes, Stack size 0 bytes, lmb.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>lmb_init</STRONG> (ARM, 56 bytes, Stack size 0 bytes, lmb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[c3]"></a>lmb_add</STRONG> (ARM, 44 bytes, Stack size 24 bytes, lmb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lmb_add &rArr; lmb_add_region &rArr; lmb_regions_adjacent
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add_region
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[c4]"></a>lmb_free</STRONG> (ARM, 308 bytes, Stack size 40 bytes, lmb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add_region
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_remove_region
</UL>

<P><STRONG><a name="[c5]"></a>lmb_reserve</STRONG> (ARM, 44 bytes, Stack size 24 bytes, lmb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lmb_reserve &rArr; lmb_add_region &rArr; lmb_regions_adjacent
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add_region
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[c6]"></a>lmb_overlaps_region</STRONG> (ARM, 128 bytes, Stack size 32 bytes, lmb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_addrs_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lmb_alloc_base
</UL>

<P><STRONG><a name="[c8]"></a>__lmb_alloc_base</STRONG> (ARM, 360 bytes, Stack size 64 bytes, lmb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_overlaps_region
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_align_up
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_align_down
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add_region
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_alloc_base
</UL>

<P><STRONG><a name="[cb]"></a>lmb_alloc_base</STRONG> (ARM, 80 bytes, Stack size 24 bytes, lmb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lmb_alloc_base
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_alloc
</UL>

<P><STRONG><a name="[cc]"></a>lmb_alloc</STRONG> (ARM, 44 bytes, Stack size 16 bytes, lmb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_alloc_base
</UL>

<P><STRONG><a name="[225]"></a>lmb_is_reserved</STRONG> (ARM, 108 bytes, Stack size 4 bytes, lmb.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>strcpy</STRONG> (ARM, 32 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLAN_to_string
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_system_init
</UL>

<P><STRONG><a name="[1b3]"></a>strncpy</STRONG> (ARM, 52 bytes, Stack size 4 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
</UL>

<P><STRONG><a name="[1c5]"></a>strcat</STRONG> (ARM, 52 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_reply
</UL>

<P><STRONG><a name="[226]"></a>strncat</STRONG> (ARM, 96 bytes, Stack size 4 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>strcmp</STRONG> (ARM, 64 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_protect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_id
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_assign
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>strncmp</STRONG> (ARM, 84 bytes, Stack size 4 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
</UL>

<P><STRONG><a name="[135]"></a>strchr</STRONG> (ARM, 56 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abbrev_spec
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>

<P><STRONG><a name="[ce]"></a>strlen</STRONG> (ARM, 36 bytes, Stack size 0 bytes, string.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_reply
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_add_credentials
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basename
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpCopyNetParams
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_linux_param
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>

<P><STRONG><a name="[cd]"></a>strrchr</STRONG> (ARM, 80 bytes, Stack size 12 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[da]"></a>strnlen</STRONG> (ARM, 52 bytes, Stack size 0 bytes, string.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[cf]"></a>strdup</STRONG> (ARM, 76 bytes, Stack size 16 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
</UL>

<P><STRONG><a name="[d2]"></a>strspn</STRONG> (ARM, 120 bytes, Stack size 8 bytes, string.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[d3]"></a>strpbrk</STRONG> (ARM, 96 bytes, Stack size 4 bytes, string.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strsep
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[d1]"></a>strtok</STRONG> (ARM, 164 bytes, Stack size 20 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>

<P><STRONG><a name="[d4]"></a>strsep</STRONG> (ARM, 80 bytes, Stack size 20 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
</UL>

<P><STRONG><a name="[227]"></a>strswab</STRONG> (ARM, 100 bytes, Stack size 0 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>memset</STRONG> (ARM, 36 bytes, Stack size 4 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>bcopy</STRONG> (ARM, 48 bytes, Stack size 4 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>memcpy</STRONG> (ARM, 44 bytes, Stack size 8 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>memmove</STRONG> (ARM, 108 bytes, Stack size 8 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>memcmp</STRONG> (ARM, 80 bytes, Stack size 12 bytes, string.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_check_prereq
</UL>

<P><STRONG><a name="[22c]"></a>memscan</STRONG> (ARM, 52 bytes, Stack size 0 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>strstr</STRONG> (ARM, 116 bytes, Stack size 20 bytes, string.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[22d]"></a>memchr</STRONG> (ARM, 68 bytes, Stack size 4 bytes, string.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>simple_strtoul</STRONG> (ARM, 272 bytes, Stack size 8 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simple_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_bootm_size
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_bootm_low
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_iminfo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_baudrate
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ip
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_VLAN
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_boot_zimage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_protect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flinfo
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_spec
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abbrev_spec
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>simple_strtol</STRONG> (ARM, 76 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = simple_strtol &rArr; simple_strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>vsprintf</STRONG> (ARM, 1616 bytes, Stack size 72 bytes, vsprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
</UL>

<P><STRONG><a name="[db]"></a>sprintf</STRONG> (ARM, 64 bytes, Stack size 32 bytes, vsprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
</UL>

<P><STRONG><a name="[ac]"></a>panic</STRONG> (ARM, 84 bytes, Stack size 24 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = panic &rArr; vprintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[e1]"></a>inflateReset</STRONG> (ARM, 120 bytes, Stack size 16 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inflateReset &rArr; inflate_blocks_reset &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateSync
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2
</UL>

<P><STRONG><a name="[e3]"></a>inflateEnd</STRONG> (ARM, 128 bytes, Stack size 16 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inflateEnd &rArr; inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_free
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gunzip
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2
</UL>

<P><STRONG><a name="[e4]"></a>adler32</STRONG> (ARM, 380 bytes, Stack size 32 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = adler32
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zlib.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>inflateInit2</STRONG> (ARM, 256 bytes, Stack size 16 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = inflateInit2 &rArr; inflateEnd &rArr; inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateEnd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_new
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gunzip
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit
</UL>

<P><STRONG><a name="[e7]"></a>inflateInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, zlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2
</UL>

<P><STRONG><a name="[f2]"></a>inflate</STRONG> (ARM, 1320 bytes, Stack size 24 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2824 + Unknown Stack Size
<LI>Call Chain = inflate &rArr; inflate_blocks &rArr; inflate_trees_fixed &rArr; huft_build &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_packet_flush
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gunzip
</UL>

<P><STRONG><a name="[f5]"></a>inflateIncomp</STRONG> (ARM, 56 bytes, Stack size 8 bytes, zlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_addhistory
</UL>

<P><STRONG><a name="[f6]"></a>inflateSync</STRONG> (ARM, 300 bytes, Stack size 32 bytes, zlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
</UL>

<P><STRONG><a name="[1f8]"></a>__rt_heap_extend</STRONG> (ARM, 12 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand (via Veneer)
</UL>

<P><STRONG><a name="[22e]"></a>__coloured_LED_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>coloured_LED_init</STRONG> (ARM, 0 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__red_LED_on</STRONG> (ARM, 4 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>red_LED_on</STRONG> (ARM, 0 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__red_LED_off</STRONG> (ARM, 4 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>red_LED_off</STRONG> (ARM, 0 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__green_LED_on</STRONG> (ARM, 4 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>green_LED_on</STRONG> (ARM, 0 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__green_LED_off</STRONG> (ARM, 4 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>green_LED_off</STRONG> (ARM, 0 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__yellow_LED_on</STRONG> (ARM, 4 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>yellow_LED_on</STRONG> (ARM, 0 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>__yellow_LED_off</STRONG> (ARM, 4 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>yellow_LED_off</STRONG> (ARM, 0 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>hang</STRONG> (ARM, 16 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hang &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PLLCLK
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[c]"></a>start_armboot</STRONG> (ARM, 668 bytes, Stack size 72 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = start_armboot &rArr; main_loop &rArr; run_command &rArr; parse_line &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumptable_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_r
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_IPaddr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_initialize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_relocate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devices_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_filename
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init_r
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_flash_config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupts
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hang
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(start)
</UL>
<P><STRONG><a name="[104]"></a>do_bootm_linux</STRONG> (ARM, 312 bytes, Stack size 80 bytes, bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = do_bootm_linux &rArr; boot_get_ramdisk &rArr; image_get_ramdisk &rArr; image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_before_linux
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[130]"></a>flush_cache</STRONG> (ARM, 4 bytes, Stack size 0 bytes, cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>

<P><STRONG><a name="[b3]"></a>enable_interrupts</STRONG> (ARM, 4 bytes, Stack size 0 bytes, interrupts_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hword
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[7a]"></a>disable_interrupts</STRONG> (ARM, 8 bytes, Stack size 0 bytes, interrupts_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hword
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_before_linux
</UL>

<P><STRONG><a name="[107]"></a>bad_mode</STRONG> (ARM, 28 bytes, Stack size 8 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_irq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_fiq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_not_used
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_data_abort
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_prefetch_abort
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_software_interrupt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_undefined_instruction
</UL>

<P><STRONG><a name="[108]"></a>show_regs</STRONG> (ARM, 372 bytes, Stack size 152 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_irq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_fiq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_not_used
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_data_abort
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_prefetch_abort
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_software_interrupt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_undefined_instruction
</UL>

<P><STRONG><a name="[10a]"></a>do_undefined_instruction</STRONG> (ARM, 36 bytes, Stack size 8 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[10b]"></a>do_software_interrupt</STRONG> (ARM, 300 bytes, Stack size 8 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[10c]"></a>do_prefetch_abort</STRONG> (ARM, 36 bytes, Stack size 8 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[10d]"></a>do_data_abort</STRONG> (ARM, 36 bytes, Stack size 8 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[10e]"></a>do_not_used</STRONG> (ARM, 36 bytes, Stack size 8 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[10f]"></a>do_fiq</STRONG> (ARM, 36 bytes, Stack size 8 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[110]"></a>do_irq</STRONG> (ARM, 36 bytes, Stack size 8 bytes, interrupts_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[23c]"></a>__board_lmb_reserve</STRONG> (ARM, 4 bytes, Stack size 0 bytes, cmd_bootm.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>board_lmb_reserve</STRONG> (ARM, 0 bytes, Stack size 0 bytes, cmd_bootm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[3e]"></a>do_bootm</STRONG> (ARM, 1112 bytes, Stack size 256 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3168 + Unknown Stack Size
<LI>Call Chain = do_bootm &rArr; gunzip &rArr; inflate &rArr; inflate_blocks &rArr; inflate_trees_fixed &rArr; huft_build &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_lmb_reserve
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove_wd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gunzip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_yesno
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_bootm_size
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_bootm_low
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_type_name
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_format
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_type
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_size
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_rtems
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_reserve
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupts
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupts
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_bootm.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[1d]"></a>do_bootd</STRONG> (ARM, 68 bytes, Stack size 32 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = do_bootd &rArr; run_command &rArr; parse_line &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd_bootm.o(.u_boot_cmd)
<LI> main.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>do_iminfo</STRONG> (ARM, 120 bytes, Stack size 32 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = do_iminfo &rArr; image_info &rArr; image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_info
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_bootm.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[12b]"></a>do_go_exec</STRONG> (ARM, 40 bytes, Stack size 16 bytes, cmd_boot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_go_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go
</UL>

<P><STRONG><a name="[41]"></a>do_go</STRONG> (ARM, 140 bytes, Stack size 32 bytes, cmd_boot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = do_go &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_boot.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[43]"></a>do_bootp</STRONG> (ARM, 48 bytes, Stack size 24 bytes, cmd_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6856 + Unknown Stack Size
<LI>Call Chain = do_bootp &rArr; netboot_common &rArr; NetLoop &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_net.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[44]"></a>do_tftpb</STRONG> (ARM, 48 bytes, Stack size 24 bytes, cmd_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6856 + Unknown Stack Size
<LI>Call Chain = do_tftpb &rArr; netboot_common &rArr; NetLoop &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_net.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[45]"></a>do_rarpb</STRONG> (ARM, 48 bytes, Stack size 24 bytes, cmd_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6856 + Unknown Stack Size
<LI>Call Chain = do_rarpb &rArr; netboot_common &rArr; NetLoop &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_net.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[46]"></a>do_nfs</STRONG> (ARM, 48 bytes, Stack size 24 bytes, cmd_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6856 + Unknown Stack Size
<LI>Call Chain = do_nfs &rArr; netboot_common &rArr; NetLoop &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_net.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[131]"></a>envmatch</STRONG> (ARM, 108 bytes, Stack size 16 bytes, cmd_nvedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_r
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_printenv
</UL>

<P><STRONG><a name="[47]"></a>do_printenv</STRONG> (ARM, 392 bytes, Stack size 40 bytes, cmd_nvedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = do_printenv &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;envmatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_nvedit.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[133]"></a>_do_setenv</STRONG> (ARM, 1820 bytes, Stack size 64 bytes, cmd_nvedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _do_setenv &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_filename
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_setbrg
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_addr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_crc_update
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_assign
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;envmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_setenv
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setenv
</UL>

<P><STRONG><a name="[17]"></a>setenv</STRONG> (ARM, 88 bytes, Stack size 32 bytes, cmd_nvedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = setenv &rArr; _do_setenv &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init_r
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpCopyNetParams
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_update_env
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>do_setenv</STRONG> (ARM, 72 bytes, Stack size 24 bytes, cmd_nvedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = do_setenv &rArr; _do_setenv &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_nvedit.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[16]"></a>getenv</STRONG> (ARM, 132 bytes, Stack size 24 bytes, cmd_nvedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getenv &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_addr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;envmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_yesno
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_bootm_size
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_bootm_low
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_IPaddr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpHandler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_VLAN
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_linux_param
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>getenv_r</STRONG> (ARM, 248 bytes, Stack size 32 bytes, cmd_nvedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getenv_r &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;envmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_baudrate
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[49]"></a>do_saveenv</STRONG> (ARM, 68 bytes, Stack size 24 bytes, cmd_nvedit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = do_saveenv &rArr; saveenv &rArr; flash_sect_erase &rArr; flash_erase &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveenv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_nvedit.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[13a]"></a>fputs</STRONG> (ARM, 52 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devices_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>

<P><STRONG><a name="[bb]"></a>puts</STRONG> (ARM, 64 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_puts
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gunzip
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_imls
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_info
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_kernel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_relocate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init_r
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_flash_config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_dram_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hang
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpTimeout
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsTimeout
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_reply
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTimeout
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_IPaddr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpTimeoutCheck
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpRequest
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_check_prereq
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpTimeout
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_protect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fill_sect_ranges
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_char
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_protect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_erase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_perror
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveenv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_printenv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[af]"></a>printf</STRONG> (ARM, 64 bytes, Stack size 312 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gunzip
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_imls
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_info
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_kernel
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_rtems
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_irq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_fiq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_not_used
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_data_abort
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_prefetch_abort
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_software_interrupt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_undefined_instruction
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init_r
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_banner
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_alloc_base
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_buffer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_size
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_options
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_print_info
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_reset
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_probe
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate_sz
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_boot_zimage
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_zimage
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_linux_param
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_protect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flinfo
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_spec
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortboot
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_print_size
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_type
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_protect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_erase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_perror
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_version
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_saveenv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_setenv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_printenv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>serial_printf</STRONG> (ARM, 64 bytes, Stack size 312 bytes, console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_puts
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
</UL>

<P><STRONG><a name="[13d]"></a>fgetc</STRONG> (ARM, 52 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[13f]"></a>ftstc</STRONG> (ARM, 52 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftstc
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tstc
</UL>

<P><STRONG><a name="[140]"></a>fputc</STRONG> (ARM, 52 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>

<P><STRONG><a name="[13c]"></a>fprintf</STRONG> (ARM, 76 bytes, Stack size 312 bytes, console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>getc</STRONG> (ARM, 52 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getc &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortboot
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>

<P><STRONG><a name="[13e]"></a>tstc</STRONG> (ARM, 52 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tstc &rArr; serial_tstc
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tstc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftstc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortboot
</UL>

<P><STRONG><a name="[bc]"></a>putc</STRONG> (ARM, 64 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putc &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_buffer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_reply
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortboot
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_char
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_echo
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_printenv
</UL>

<P><STRONG><a name="[dd]"></a>vprintf</STRONG> (ARM, 48 bytes, Stack size 304 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = vprintf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>

<P><STRONG><a name="[b2]"></a>ctrlc</STRONG> (ARM, 104 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ctrlc &rArr; tstc &rArr; serial_tstc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tstc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_printenv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[23d]"></a>disable_ctrlc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, console.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>had_ctrlc</STRONG> (ARM, 12 bytes, Stack size 0 bytes, console.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[177]"></a>clear_ctrlc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, console.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[23e]"></a>dbg</STRONG> (ARM, 4 bytes, Stack size 0 bytes, console.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>console_assign</STRONG> (ARM, 208 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = console_assign &rArr; console_setfile
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListNumItems
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListGetPtrToItem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_setfile
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>

<P><STRONG><a name="[3a]"></a>console_init_f</STRONG> (ARM, 24 bytes, Stack size 0 bytes, console.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>console_init_r</STRONG> (ARM, 444 bytes, Stack size 24 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = console_init_r &rArr; setenv &rArr; _do_setenv &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListNumItems
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListGetPtrToItem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_setfile
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setenv
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[4b]"></a>do_version</STRONG> (ARM, 44 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = do_version &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[4c]"></a>do_echo</STRONG> (ARM, 148 bytes, Stack size 40 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = do_echo &rArr; putc &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[144]"></a>find_cmd</STRONG> (ARM, 164 bytes, Stack size 32 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = find_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
</UL>

<P><STRONG><a name="[4d]"></a>do_help</STRONG> (ARM, 536 bytes, Stack size 64 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = do_help &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[ad]"></a>flash_protect</STRONG> (ARM, 264 bytes, Stack size 20 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[147]"></a>addr2info</STRONG> (ARM, 100 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[146]"></a>flash_write</STRONG> (ARM, 364 bytes, Stack size 40 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = flash_write &rArr; write_buff &rArr; write_hword &rArr; icache_disable &rArr; write_p15_c1
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buff
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr2info
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveenv
</UL>

<P><STRONG><a name="[148]"></a>flash_perror</STRONG> (ARM, 532 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = flash_perror &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveenv
</UL>

<P><STRONG><a name="[149]"></a>device_register</STRONG> (ARM, 40 bytes, Stack size 8 bytes, devices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = device_register &rArr; ListInsertItem &rArr; ListInsertItems &rArr; ExpandListSpace &rArr; SetHandleSize &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInsertItem
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_system_init
</UL>

<P><STRONG><a name="[fe]"></a>devices_init</STRONG> (ARM, 124 bytes, Stack size 16 bytes, devices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = devices_init &rArr; drv_system_init &rArr; device_register &rArr; ListInsertItem &rArr; ListInsertItems &rArr; ExpandListSpace &rArr; SetHandleSize &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListCreate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_system_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[14d]"></a>devices_done</STRONG> (ARM, 28 bytes, Stack size 8 bytes, devices.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDispose
</UL>

<P><STRONG><a name="[153]"></a>env_get_char_spec</STRONG> (ARM, 24 bytes, Stack size 0 bytes, env_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char_init
</UL>

<P><STRONG><a name="[37]"></a>env_init</STRONG> (ARM, 140 bytes, Stack size 8 bytes, env_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = env_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[139]"></a>saveenv</STRONG> (ARM, 192 bytes, Stack size 32 bytes, env_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = saveenv &rArr; flash_sect_erase &rArr; flash_erase &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_protect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_erase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_perror
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_saveenv
</UL>

<P><STRONG><a name="[151]"></a>env_relocate_spec</STRONG> (ARM, 36 bytes, Stack size 8 bytes, env_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = env_relocate_spec &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_relocate
</UL>

<P><STRONG><a name="[138]"></a>env_crc_update</STRONG> (ARM, 48 bytes, Stack size 8 bytes, env_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = env_crc_update
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_env
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>

<P><STRONG><a name="[154]"></a>env_get_char_memory</STRONG> (ARM, 56 bytes, Stack size 0 bytes, env_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char
</UL>

<P><STRONG><a name="[132]"></a>env_get_char</STRONG> (ARM, 72 bytes, Stack size 16 bytes, env_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char_memory
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_r
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_printenv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;envmatch
</UL>

<P><STRONG><a name="[134]"></a>env_get_addr</STRONG> (ARM, 56 bytes, Stack size 0 bytes, env_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
</UL>

<P><STRONG><a name="[155]"></a>set_default_env</STRONG> (ARM, 72 bytes, Stack size 8 bytes, env_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_default_env &rArr; env_crc_update
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_crc_update
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_relocate
</UL>

<P><STRONG><a name="[fc]"></a>env_relocate</STRONG> (ARM, 100 bytes, Stack size 8 bytes, env_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = env_relocate &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_env
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_relocate_spec
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[156]"></a>get_version</STRONG> (ARM, 8 bytes, Stack size 0 bytes, exports.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>jumptable_init</STRONG> (ARM, 272 bytes, Stack size 8 bytes, exports.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jumptable_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[157]"></a>NewHandle</STRONG> (ARM, 100 bytes, Stack size 16 bytes, lists.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NewHandle &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListCreate
</UL>

<P><STRONG><a name="[158]"></a>DisposeHandle</STRONG> (ARM, 40 bytes, Stack size 8 bytes, lists.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDispose
</UL>

<P><STRONG><a name="[23f]"></a>GetHandleSize</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lists.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>SetHandleSize</STRONG> (ARM, 144 bytes, Stack size 32 bytes, lists.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetHandleSize &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandListSpace
</UL>

<P><STRONG><a name="[14c]"></a>ListCreate</STRONG> (ARM, 104 bytes, Stack size 16 bytes, lists.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ListCreate &rArr; NewHandle &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devices_init
</UL>

<P><STRONG><a name="[240]"></a>ListSetAllocationPolicy</STRONG> (ARM, 20 bytes, Stack size 0 bytes, lists.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>ListDispose</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lists.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisposeHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devices_done
</UL>

<P><STRONG><a name="[15c]"></a>ListInsertItems</STRONG> (ARM, 468 bytes, Stack size 32 bytes, lists.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ListInsertItems &rArr; ExpandListSpace &rArr; SetHandleSize &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandListSpace
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInsertItem
</UL>

<P><STRONG><a name="[14a]"></a>ListInsertItem</STRONG> (ARM, 44 bytes, Stack size 16 bytes, lists.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ListInsertItem &rArr; ListInsertItems &rArr; ExpandListSpace &rArr; SetHandleSize &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInsertItems
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
</UL>

<P><STRONG><a name="[15e]"></a>ListGetItems</STRONG> (ARM, 104 bytes, Stack size 24 bytes, lists.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[141]"></a>ListGetPtrToItem</STRONG> (ARM, 64 bytes, Stack size 0 bytes, lists.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init_r
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_assign
</UL>

<P><STRONG><a name="[241]"></a>ListGetDataPtr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lists.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>ListGetItemSize</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lists.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>ListNumItems</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lists.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init_r
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_assign
</UL>

<P><STRONG><a name="[119]"></a>image_check_hcrc</STRONG> (ARM, 136 bytes, Stack size 88 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = image_check_hcrc &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_imls
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_info
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_kernel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
</UL>

<P><STRONG><a name="[11b]"></a>image_check_dcrc</STRONG> (ARM, 96 bytes, Stack size 24 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = image_check_dcrc &rArr; crc32_wd
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_wd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_data_size
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_imls
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_info
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_kernel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
</UL>

<P><STRONG><a name="[163]"></a>image_multi_count</STRONG> (ARM, 64 bytes, Stack size 24 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = image_multi_count
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_getimg
</UL>

<P><STRONG><a name="[117]"></a>image_multi_getimg</STRONG> (ARM, 152 bytes, Stack size 56 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = image_multi_getimg &rArr; image_multi_count
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_count
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_data
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
</UL>

<P><STRONG><a name="[164]"></a>genimg_get_comp_name</STRONG> (ARM, 32 bytes, Stack size 8 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = genimg_get_comp_name
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_name
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_type
</UL>

<P><STRONG><a name="[126]"></a>genimg_get_type_name</STRONG> (ARM, 32 bytes, Stack size 8 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = genimg_get_type_name
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_type
</UL>

<P><STRONG><a name="[166]"></a>genimg_get_arch_name</STRONG> (ARM, 32 bytes, Stack size 8 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = genimg_get_arch_name
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_name
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_type
</UL>

<P><STRONG><a name="[167]"></a>genimg_get_os_name</STRONG> (ARM, 32 bytes, Stack size 8 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = genimg_get_os_name
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_name
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_type
</UL>

<P><STRONG><a name="[11a]"></a>image_print_contents</STRONG> (ARM, 592 bytes, Stack size 32 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_getimg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_count
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_type
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_data_size
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_load
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_print_size
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_type
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_imls
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_info
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_kernel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
</UL>

<P><STRONG><a name="[121]"></a>getenv_yesno</STRONG> (ARM, 220 bytes, Stack size 16 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getenv_yesno &rArr; getenv &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[123]"></a>getenv_bootm_low</STRONG> (ARM, 68 bytes, Stack size 16 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getenv_bootm_low &rArr; getenv &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[124]"></a>getenv_bootm_size</STRONG> (ARM, 80 bytes, Stack size 16 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getenv_bootm_size &rArr; getenv &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[127]"></a>memmove_wd</STRONG> (ARM, 44 bytes, Stack size 24 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memmove_wd
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[16e]"></a>genimg_get_os_id</STRONG> (ARM, 32 bytes, Stack size 8 bytes, image.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_id
</UL>

<P><STRONG><a name="[16f]"></a>genimg_get_arch_id</STRONG> (ARM, 32 bytes, Stack size 8 bytes, image.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_id
</UL>

<P><STRONG><a name="[170]"></a>genimg_get_type_id</STRONG> (ARM, 32 bytes, Stack size 8 bytes, image.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_id
</UL>

<P><STRONG><a name="[171]"></a>genimg_get_comp_id</STRONG> (ARM, 32 bytes, Stack size 8 bytes, image.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_table_entry_id
</UL>

<P><STRONG><a name="[11e]"></a>genimg_get_format</STRONG> (ARM, 48 bytes, Stack size 16 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = genimg_get_format &rArr; image_check_magic
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_magic
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_imls
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_info
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
</UL>

<P><STRONG><a name="[11d]"></a>genimg_get_image</STRONG> (ARM, 12 bytes, Stack size 0 bytes, image.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
</UL>

<P><STRONG><a name="[172]"></a>genimg_has_config</STRONG> (ARM, 56 bytes, Stack size 0 bytes, image.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
</UL>

<P><STRONG><a name="[105]"></a>boot_get_ramdisk</STRONG> (ARM, 428 bytes, Stack size 48 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = boot_get_ramdisk &rArr; image_get_ramdisk &rArr; image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_getimg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_image
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_format
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_has_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_type
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_data_size
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_load
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
</UL>

<P><STRONG><a name="[173]"></a>zalloc</STRONG> (ARM, 52 bytes, Stack size 24 bytes, gunzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = zalloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gunzip.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>zfree</STRONG> (ARM, 32 bytes, Stack size 16 bytes, gunzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = zfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gunzip.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>gunzip</STRONG> (ARM, 400 bytes, Stack size 88 bytes, gunzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2912 + Unknown Stack Size
<LI>Call Chain = gunzip &rArr; inflate &rArr; inflate_blocks &rArr; inflate_trees_fixed &rArr; huft_build &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateEnd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[243]"></a>__show_boot_progress</STRONG> (ARM, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>show_boot_progress</STRONG> (ARM, 0 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_kernel
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_rtems
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_linux
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_relocate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>

<P><STRONG><a name="[175]"></a>parse_line</STRONG> (ARM, 204 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = parse_line &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[129]"></a>run_command</STRONG> (ARM, 684 bytes, Stack size 624 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = run_command &rArr; parse_line &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_line
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ctrlc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;had_ctrlc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_run
</UL>

<P><STRONG><a name="[17a]"></a>readline_into_buffer</STRONG> (ARM, 528 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = readline_into_buffer &rArr; delete_char &rArr; putc &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_char
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline
</UL>

<P><STRONG><a name="[17b]"></a>readline</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = readline &rArr; readline_into_buffer &rArr; delete_char &rArr; putc &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[103]"></a>main_loop</STRONG> (ARM, 292 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = main_loop &rArr; run_command &rArr; parse_line &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtol
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abortboot
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[4a]"></a>do_run</STRONG> (ARM, 144 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = do_run &rArr; run_command &rArr; parse_line &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_nvedit.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[4e]"></a>do_flinfo</STRONG> (ARM, 192 bytes, Stack size 24 bytes, cmd_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = do_flinfo &rArr; flash_print_info &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_print_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_flash.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[150]"></a>flash_sect_erase</STRONG> (ARM, 232 bytes, Stack size 48 bytes, cmd_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = flash_sect_erase &rArr; flash_erase &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fill_sect_ranges
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveenv
</UL>

<P><STRONG><a name="[4f]"></a>do_flerase</STRONG> (ARM, 832 bytes, Stack size 56 bytes, cmd_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = do_flerase &rArr; flash_sect_erase &rArr; flash_erase &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_spec
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abbrev_spec
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_erase
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_flash.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[14f]"></a>flash_sect_protect</STRONG> (ARM, 308 bytes, Stack size 56 bytes, cmd_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = flash_sect_protect &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fill_sect_ranges
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_protect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveenv
</UL>

<P><STRONG><a name="[50]"></a>do_protect</STRONG> (ARM, 920 bytes, Stack size 64 bytes, cmd_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = do_protect &rArr; flash_sect_protect &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_spec
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abbrev_spec
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_protect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_flash.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[181]"></a>cache_clean_invalidate</STRONG> (ARM, 76 bytes, Stack size 0 bytes, cmd_boot_zimage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_linux
</UL>

<P><STRONG><a name="[182]"></a>tlb_invalidate</STRONG> (ARM, 24 bytes, Stack size 0 bytes, cmd_boot_zimage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_linux
</UL>

<P><STRONG><a name="[180]"></a>call_linux</STRONG> (ARM, 108 bytes, Stack size 24 bytes, cmd_boot_zimage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = call_linux
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlb_invalidate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_clean_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_zimage
</UL>

<P><STRONG><a name="[184]"></a>boot_zimage</STRONG> (ARM, 116 bytes, Stack size 24 bytes, cmd_boot_zimage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = boot_zimage &rArr; setup_linux_param &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_linux
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_linux_param
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_boot_zimage
</UL>

<P><STRONG><a name="[51]"></a>do_boot_zimage</STRONG> (ARM, 100 bytes, Stack size 24 bytes, cmd_boot_zimage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = do_boot_zimage &rArr; boot_zimage &rArr; setup_linux_param &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_zimage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_boot_zimage.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[191]"></a>BootpRequest</STRONG> (ARM, 524 bytes, Stack size 40 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = BootpRequest &rArr; NetSendPacket &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_filename
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetIP
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetEther
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendPacket
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWriteIP
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpExtended
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpTimeout
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[102]"></a>eth_initialize</STRONG> (ARM, 12 bytes, Stack size 0 bytes, eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[192]"></a>NetSetEther</STRONG> (ARM, 188 bytes, Stack size 32 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NetSetEther
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpRequest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
</UL>

<P><STRONG><a name="[19a]"></a>ArpRequest</STRONG> (ARM, 332 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWriteIP
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetEther
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpTimeoutCheck
</UL>

<P><STRONG><a name="[196]"></a>NetSetHandler</STRONG> (ARM, 12 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
</UL>

<P><STRONG><a name="[18e]"></a>NetSetTimeout</STRONG> (ARM, 76 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NetSetTimeout &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpTimeout
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTimeout
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpTimeout
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
</UL>

<P><STRONG><a name="[198]"></a>NetStartAgain</STRONG> (ARM, 160 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = NetStartAgain &rArr; getenv &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_halt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpTimeout
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpTimeoutCheck
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpTimeout
</UL>

<P><STRONG><a name="[19e]"></a>ArpTimeoutCheck</STRONG> (ARM, 352 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ArpTimeoutCheck &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpRequest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[1a0]"></a>string_to_VLAN</STRONG> (ARM, 100 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = string_to_VLAN &rArr; simple_strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_VLAN
</UL>

<P><STRONG><a name="[1a1]"></a>getenv_VLAN</STRONG> (ARM, 32 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getenv_VLAN &rArr; getenv &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_VLAN
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[1a2]"></a>string_to_ip</STRONG> (ARM, 156 bytes, Stack size 24 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = string_to_ip &rArr; simple_strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_IPaddr
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
</UL>

<P><STRONG><a name="[fd]"></a>getenv_IPaddr</STRONG> (ARM, 32 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getenv_IPaddr &rArr; getenv &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[12f]"></a>NetLoop</STRONG> (ARM, 1424 bytes, Stack size 40 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6792 + Unknown Stack Size
<LI>Call Chain = NetLoop &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_IPaddr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_halt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_VLAN
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpTimeoutCheck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCopyIP
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_check_prereq
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setenv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>

<P><STRONG><a name="[197]"></a>NetSendPacket</STRONG> (ARM, 32 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = NetSendPacket &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
</UL>

<P><STRONG><a name="[1a9]"></a>NetCksum</STRONG> (ARM, 76 bytes, Stack size 4 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NetCksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCksumOk
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetIP
</UL>

<P><STRONG><a name="[195]"></a>NetSetIP</STRONG> (ARM, 276 bytes, Stack size 40 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NetSetIP &rArr; NetCopyIP
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCksum
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCopyIP
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
</UL>

<P><STRONG><a name="[1aa]"></a>NetSendUDPPacket</STRONG> (ARM, 348 bytes, Stack size 32 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpRequest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetIP
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetEther
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend
</UL>

<P><STRONG><a name="[12d]"></a>ip_to_string</STRONG> (ARM, 76 bytes, Stack size 24 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ip_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_IPaddr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_update_env
</UL>

<P><STRONG><a name="[1ab]"></a>print_IPaddr</STRONG> (ARM, 36 bytes, Stack size 24 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = print_IPaddr &rArr; ip_to_string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
</UL>

<P><STRONG><a name="[1ac]"></a>NetCksumOk</STRONG> (ARM, 64 bytes, Stack size 12 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetCksumOk &rArr; NetCksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
</UL>

<P><STRONG><a name="[1ad]"></a>NetReceive</STRONG> (ARM, 1720 bytes, Stack size 64 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = NetReceive &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCksumOk
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_IPaddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCopyIP
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReadIP
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetEther
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx
</UL>

<P><STRONG><a name="[1af]"></a>NetEthHdrSize</STRONG> (ARM, 76 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NetEthHdrSize
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend
</UL>

<P><STRONG><a name="[101]"></a>copy_filename</STRONG> (ARM, 92 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpCopyNetParams
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_setenv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>

<P><STRONG><a name="[1b0]"></a>VLAN_to_string</STRONG> (ARM, 96 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>

<P><STRONG><a name="[190]"></a>TftpStart</STRONG> (ARM, 900 bytes, Stack size 24 bytes, tftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = TftpStart &rArr; TftpSend &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_size
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_IPaddr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ip
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[18f]"></a>NfsStart</STRONG> (ARM, 980 bytes, Stack size 24 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6752 + Unknown Stack Size
<LI>Call Chain = NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_size
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirname
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basename
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_IPaddr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ip
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[1a6]"></a>RarpRequest</STRONG> (ARM, 264 bytes, Stack size 16 bytes, rarp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = RarpRequest &rArr; NetSendPacket &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetEther
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendPacket
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpTimeout
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[1d2]"></a>read_srom_word</STRONG> (ARM, 88 bytes, Stack size 16 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = read_srom_word &rArr; udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ior
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[1a4]"></a>eth_init</STRONG> (ARM, 1276 bytes, Stack size 48 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = eth_init &rArr; dm9000_reset &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_srom_word
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_nic
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_read
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PHY_mode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_probe
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ior
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[19c]"></a>eth_send</STRONG> (ARM, 216 bytes, Stack size 24 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ior
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpRequest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendPacket
</UL>

<P><STRONG><a name="[19d]"></a>eth_halt</STRONG> (ARM, 240 bytes, Stack size 8 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = eth_halt &rArr; phy_write &rArr; udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[1a7]"></a>eth_rx</STRONG> (ARM, 360 bytes, Stack size 24 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = eth_rx &rArr; NetReceive &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_reset
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ior
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[1d3]"></a>write_srom_word</STRONG> (ARM, 92 bytes, Stack size 16 bytes, dm9000x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
</UL>

<P><STRONG><a name="[244]"></a>ferror</STRONG> (ARM, 12 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>_ttywrch</STRONG> (ARM, 24 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ttywrch &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via Veneer)
</UL>

<P><STRONG><a name="[206]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via Veneer)
</UL>

<P><STRONG><a name="[245]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1d8]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f9]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_init (via Veneer)
</UL>

<P><STRONG><a name="[14]"></a>malloc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumptable_init (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_relocate (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zalloc (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandleSize (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewHandle (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zfree (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisposeHandle (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewHandle (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>realloc</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, h1_realloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandleSize (via Veneer)
</UL>

<P><STRONG><a name="[dc]"></a>__c89vsprintf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_printf (via Veneer)
</UL>

<P><STRONG><a name="[1a8]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend (via Veneer)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLAN_to_string (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_to_string (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop (via Veneer)
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1df]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1e0]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5f]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[65]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[6d]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[57]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[1e6]"></a>__printf</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_addhistory
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_flush
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_reply
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_reply
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_reply
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_umountall_reply
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_reply
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_lookup_reply
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_req
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpRequest
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCopyIP
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWriteIP
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReadIP
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetEther
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCopyIP
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetWriteIP
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpVendorFieldProcess
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpCopyNetParams
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_linux_param
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListGetItems
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInsertItems
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_env
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[1ea]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[247]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_memmove</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove_wd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInsertItems
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_memmove</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[248]"></a>__memmove_lastfew</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_regs
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_add_credentials
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_relocate_spec
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_memmove4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_hcrc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_memmove8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__rt_memmove_w</STRONG> (ARM, 128 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1ec]"></a>__memmove_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[24d]"></a>__memmove_lastfew_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_umountall_reply
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInsertItems
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandleSize
</UL>

<P><STRONG><a name="[1ee]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[24e]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_linux_param
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_env
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_system_init
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_print_info
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_reply
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_protect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandListSpace
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[1da]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
</UL>

<P><STRONG><a name="[252]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1e1]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_int_common</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[55]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[1dc]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[31]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> c89vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[1f0]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[6f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[71]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[1f2]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[67]"></a>_printf_longlong_dec</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[1f5]"></a>_printf_longlong_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[63]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[6b]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1e3]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[0]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxmm.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>__rt_heap_expand</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, heapauxmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1f4]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[254]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[202]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[73]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[75]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[1f3]"></a>_wcrtomb</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[1f7]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1f6]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[204]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
</UL>

<P><STRONG><a name="[201]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[200]"></a>_printf_fp_infnan</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1fa]"></a>_btod_etento</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[207]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__div64_32
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_buffer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_size
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_setbrg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay_masked
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PCLK
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_HCLK
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PLLCLK
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
</UL>

<P><STRONG><a name="[1fb]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[20d]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[20c]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[20e]"></a>__btod_div_common</STRONG> (ARM, 716 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[20f]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1fc]"></a>_btod_ediv</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[1fd]"></a>_btod_emul</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[210]"></a>__btod_mult_common</STRONG> (ARM, 616 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1e7]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1de]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_wctomb.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>

<P><STRONG><a name="[205]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _wcrtomb.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[1ff]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[1e8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[211]"></a>_get_lc_numeric</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[33]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[59]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>read_p15_c1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcache_status
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcache_disable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcache_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_status
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_p15_c1
</UL>

<P><STRONG><a name="[77]"></a>write_p15_c1</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_p15_c1
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_p15_c1
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcache_disable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcache_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
</UL>

<P><STRONG><a name="[7d]"></a>cp_delay</STRONG> (ARM, 48 bytes, Stack size 4 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cp_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcache_disable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcache_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
</UL>

<P><STRONG><a name="[52]"></a>_start</STRONG> (ARM, 0 bytes, Stack size unknown bytes, start.o(start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _start &rArr; start_code &rArr; clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(start)
</UL>
<P><STRONG><a name="[a]"></a>start_code</STRONG> (ARM, 0 bytes, Stack size unknown bytes, start.o(start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = start_code &rArr; clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(start)
</UL>
<P><STRONG><a name="[83]"></a>get_PLLCLK</STRONG> (ARM, 156 bytes, Stack size 32 bytes, speed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = get_PLLCLK &rArr; hang &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hang
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_UCLK
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_FCLK
</UL>

<P><STRONG><a name="[8b]"></a>READ_TIMER</STRONG> (ARM, 28 bytes, Stack size 0 bytes, s3c24x0_interrupts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_masked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer_masked
</UL>

<P><STRONG><a name="[91]"></a>S3C24X0_GetBase_UART</STRONG> (ARM, 16 bytes, Stack size 0 bytes, s3c24x0_serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tstc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_setbrg
</UL>

<P><STRONG><a name="[98]"></a>s3c2440_nand_deselect_chip</STRONG> (ARM, 20 bytes, Stack size 0 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_deselect_chip
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_reset
</UL>

<P><STRONG><a name="[97]"></a>s3c2440_wait_idle</STRONG> (ARM, 52 bytes, Stack size 0 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_idle
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_reset
</UL>

<P><STRONG><a name="[96]"></a>s3c2440_write_cmd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_reset
</UL>

<P><STRONG><a name="[95]"></a>s3c2440_nand_select_chip</STRONG> (ARM, 40 bytes, Stack size 0 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_select_chip
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_reset
</UL>

<P><STRONG><a name="[94]"></a>s3c2440_nand_reset</STRONG> (ARM, 32 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_select_chip
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_write_cmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_wait_idle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_deselect_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_reset
</UL>

<P><STRONG><a name="[9f]"></a>s3c2440_write_addr</STRONG> (ARM, 132 bytes, Stack size 0 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_addr
</UL>

<P><STRONG><a name="[a1]"></a>s3c2440_write_addr_lp</STRONG> (ARM, 196 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_addr_lp
</UL>

<P><STRONG><a name="[a3]"></a>s3c2440_read_data</STRONG> (ARM, 16 bytes, Stack size 0 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[99]"></a>nand_reset</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_init_ll
</UL>

<P><STRONG><a name="[9a]"></a>wait_idle</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_wait_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll_lp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll
</UL>

<P><STRONG><a name="[9b]"></a>nand_select_chip</STRONG> (ARM, 36 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_select_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll_lp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NF_ReadID
</UL>

<P><STRONG><a name="[9c]"></a>nand_deselect_chip</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_nand_deselect_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll_lp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NF_ReadID
</UL>

<P><STRONG><a name="[9d]"></a>write_cmd</STRONG> (ARM, 24 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll_lp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NF_ReadID
</UL>

<P><STRONG><a name="[9e]"></a>write_addr</STRONG> (ARM, 24 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_write_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll
</UL>

<P><STRONG><a name="[a0]"></a>write_addr_lp</STRONG> (ARM, 24 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_write_addr_lp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll_lp
</UL>

<P><STRONG><a name="[a2]"></a>read_data</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boot_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s3c2440_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll_lp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_ll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NF_ReadID
</UL>

<P><STRONG><a name="[b4]"></a>write_hword</STRONG> (ARM, 388 bytes, Stack size 40 bytes, tq2440_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_hword &rArr; icache_disable &rArr; write_p15_c1
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupts
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_masked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer_masked
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupts
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_status
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_disable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buff
</UL>

<P><STRONG><a name="[c7]"></a>lmb_addrs_overlap</STRONG> (ARM, 44 bytes, Stack size 0 bytes, lmb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_overlaps_region
</UL>

<P><STRONG><a name="[bf]"></a>lmb_addrs_adjacent</STRONG> (ARM, 52 bytes, Stack size 0 bytes, lmb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add_region
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_regions_adjacent
</UL>

<P><STRONG><a name="[be]"></a>lmb_regions_adjacent</STRONG> (ARM, 84 bytes, Stack size 32 bytes, lmb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lmb_regions_adjacent
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_addrs_adjacent
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add_region
</UL>

<P><STRONG><a name="[c1]"></a>lmb_remove_region</STRONG> (ARM, 96 bytes, Stack size 0 bytes, lmb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_free
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_coalesce_regions
</UL>

<P><STRONG><a name="[c0]"></a>lmb_coalesce_regions</STRONG> (ARM, 76 bytes, Stack size 16 bytes, lmb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lmb_coalesce_regions
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_remove_region
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add_region
</UL>

<P><STRONG><a name="[c2]"></a>lmb_add_region</STRONG> (ARM, 532 bytes, Stack size 40 bytes, lmb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lmb_add_region &rArr; lmb_regions_adjacent
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_coalesce_regions
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_regions_adjacent
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_addrs_adjacent
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lmb_alloc_base
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_reserve
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_free
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmb_add
</UL>

<P><STRONG><a name="[c9]"></a>lmb_align_down</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lmb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lmb_alloc_base
</UL>

<P><STRONG><a name="[ca]"></a>lmb_align_up</STRONG> (ARM, 24 bytes, Stack size 0 bytes, lmb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lmb_alloc_base
</UL>

<P><STRONG><a name="[d9]"></a>skip_atoi</STRONG> (ARM, 76 bytes, Stack size 0 bytes, vsprintf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[d7]"></a>number</STRONG> (ARM, 704 bytes, Stack size 120 bytes, vsprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[e0]"></a>inflate_trees_free</STRONG> (ARM, 84 bytes, Stack size 24 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inflate_trees_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_bits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_dynamic
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huft_build
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>

<P><STRONG><a name="[df]"></a>inflate_codes_free</STRONG> (ARM, 44 bytes, Stack size 16 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inflate_codes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>

<P><STRONG><a name="[de]"></a>inflate_blocks_reset</STRONG> (ARM, 244 bytes, Stack size 16 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inflate_blocks_reset &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes_free
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_new
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_free
</UL>

<P><STRONG><a name="[e2]"></a>inflate_blocks_free</STRONG> (ARM, 100 bytes, Stack size 24 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateEnd
</UL>

<P><STRONG><a name="[e5]"></a>inflate_blocks_new</STRONG> (ARM, 176 bytes, Stack size 24 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inflate_blocks_new &rArr; inflate_blocks_reset &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2
</UL>

<P><STRONG><a name="[f3]"></a>inflate_packet_flush</STRONG> (ARM, 40 bytes, Stack size 0 bytes, zlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
</UL>

<P><STRONG><a name="[e8]"></a>inflate_flush</STRONG> (ARM, 432 bytes, Stack size 32 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inflate_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes
</UL>

<P><STRONG><a name="[eb]"></a>inflate_fast</STRONG> (ARM, 1052 bytes, Stack size 64 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inflate_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes
</UL>

<P><STRONG><a name="[ea]"></a>inflate_codes</STRONG> (ARM, 2816 bytes, Stack size 80 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inflate_codes &rArr; inflate_fast
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_fast
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[f1]"></a>inflate_codes_new</STRONG> (ARM, 92 bytes, Stack size 32 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inflate_codes_new
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[ec]"></a>huft_build</STRONG> (ARM, 1496 bytes, Stack size 1432 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = huft_build &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_fixed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_bits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_dynamic
</UL>

<P><STRONG><a name="[ed]"></a>inflate_trees_dynamic</STRONG> (ARM, 264 bytes, Stack size 72 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = inflate_trees_dynamic &rArr; huft_build &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huft_build
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[ee]"></a>inflate_trees_bits</STRONG> (ARM, 124 bytes, Stack size 40 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = inflate_trees_bits &rArr; huft_build &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huft_build
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[e]"></a>ffree</STRONG> (ARM, 16 bytes, Stack size 0 bytes, zlib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> zlib.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>falloc</STRONG> (ARM, 52 bytes, Stack size 0 bytes, zlib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> zlib.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>inflate_trees_fixed</STRONG> (ARM, 684 bytes, Stack size 1256 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2712<LI>Call Chain = inflate_trees_fixed &rArr; huft_build &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huft_build
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[f0]"></a>inflate_blocks</STRONG> (ARM, 4108 bytes, Stack size 88 bytes, zlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2800<LI>Call Chain = inflate_blocks &rArr; inflate_trees_fixed &rArr; huft_build &rArr; inflate_trees_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_fixed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_bits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_dynamic
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes_new
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_flush
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes_free
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
</UL>

<P><STRONG><a name="[f4]"></a>inflate_addhistory</STRONG> (ARM, 404 bytes, Stack size 40 bytes, zlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateIncomp
</UL>

<P><STRONG><a name="[f7]"></a>mem_malloc_init</STRONG> (ARM, 88 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mem_malloc_init &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[38]"></a>init_baudrate</STRONG> (ARM, 104 bytes, Stack size 72 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = init_baudrate &rArr; getenv_r &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv_r
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>display_banner</STRONG> (ARM, 28 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = display_banner &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>display_dram_config</STRONG> (ARM, 88 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = display_dram_config &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.data)
</UL>
<P><STRONG><a name="[fb]"></a>display_flash_config</STRONG> (ARM, 36 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = display_flash_config &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_size
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_armboot
</UL>

<P><STRONG><a name="[111]"></a>image_check_magic</STRONG> (ARM, 52 bytes, Stack size 8 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_check_magic
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_info
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_kernel
</UL>

<P><STRONG><a name="[113]"></a>do_bootm_rtems</STRONG> (ARM, 88 bytes, Stack size 32 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = do_bootm_rtems &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[115]"></a>do_bootm_netbsd</STRONG> (ARM, 344 bytes, Stack size 56 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = do_bootm_netbsd &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_getimg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_type
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[118]"></a>image_get_kernel</STRONG> (ARM, 520 bytes, Stack size 24 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = image_get_kernel &rArr; image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_hcrc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_dcrc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_magic
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
</UL>

<P><STRONG><a name="[11c]"></a>boot_get_kernel</STRONG> (ARM, 388 bytes, Stack size 40 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = boot_get_kernel &rArr; image_get_kernel &rArr; image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_getimg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_image
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_format
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_type
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_size
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_kernel
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
</UL>

<P><STRONG><a name="[12a]"></a>image_info</STRONG> (ARM, 480 bytes, Stack size 16 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = image_info &rArr; image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_hcrc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_dcrc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_format
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_magic
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_iminfo
</UL>

<P><STRONG><a name="[40]"></a>do_imls</STRONG> (ARM, 248 bytes, Stack size 40 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = do_imls &rArr; image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_hcrc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_dcrc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_format
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_bootm.o(.u_boot_cmd)
</UL>
<P><STRONG><a name="[112]"></a>__fswab32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cmd_bootm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ep
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_size
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_magic
</UL>

<P><STRONG><a name="[11f]"></a>image_get_size</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
</UL>

<P><STRONG><a name="[114]"></a>image_get_ep</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cmd_bootm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_get_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_rtems
</UL>

<P><STRONG><a name="[116]"></a>image_get_type</STRONG> (ARM, 12 bytes, Stack size 0 bytes, cmd_bootm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_kernel
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm_netbsd
</UL>

<P><STRONG><a name="[12c]"></a>netboot_update_env</STRONG> (ARM, 324 bytes, Stack size 32 bytes, cmd_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = netboot_update_env &rArr; setenv &rArr; _do_setenv &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setenv
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_common
</UL>

<P><STRONG><a name="[12e]"></a>netboot_common</STRONG> (ARM, 696 bytes, Stack size 40 bytes, cmd_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6832 + Unknown Stack Size
<LI>Call Chain = netboot_common &rArr; NetLoop &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootm
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_cache
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_filename
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netboot_update_env
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_nfs
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rarpb
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_tftpb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bootp
</UL>

<P><STRONG><a name="[142]"></a>console_setfile</STRONG> (ARM, 292 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = console_setfile
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_init_r
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;console_assign
</UL>

<P><STRONG><a name="[14b]"></a>drv_system_init</STRONG> (ARM, 92 bytes, Stack size 56 bytes, devices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_system_init &rArr; device_register &rArr; ListInsertItem &rArr; ListInsertItems &rArr; ExpandListSpace &rArr; SetHandleSize &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devices_init
</UL>

<P><STRONG><a name="[152]"></a>env_get_char_init</STRONG> (ARM, 64 bytes, Stack size 16 bytes, env_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char_spec
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_get_char
</UL>

<P><STRONG><a name="[13]"></a>dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, exports.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> exports.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>ExpandListSpace</STRONG> (ARM, 312 bytes, Stack size 16 bytes, lists.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ExpandListSpace &rArr; SetHandleSize &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandleSize
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInsertItems
</UL>

<P><STRONG><a name="[15f]"></a>image_check_magic</STRONG> (ARM, 52 bytes, Stack size 8 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_check_magic
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_format
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
</UL>

<P><STRONG><a name="[165]"></a>get_table_entry_name</STRONG> (ARM, 52 bytes, Stack size 0 bytes, image.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_type_name
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_os_name
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_arch_name
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_comp_name
</UL>

<P><STRONG><a name="[168]"></a>image_print_type</STRONG> (ARM, 120 bytes, Stack size 32 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = image_print_type &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_type_name
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_os_name
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_arch_name
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_comp_name
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
</UL>

<P><STRONG><a name="[169]"></a>genimg_print_size</STRONG> (ARM, 40 bytes, Stack size 8 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_size
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
</UL>

<P><STRONG><a name="[16c]"></a>image_get_ramdisk</STRONG> (ARM, 340 bytes, Stack size 24 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = image_get_ramdisk &rArr; image_print_contents &rArr; genimg_print_size &rArr; print_size &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_hcrc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_dcrc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_boot_progress
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_arch_name
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_type
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_magic
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
</UL>

<P><STRONG><a name="[16d]"></a>get_table_entry_id</STRONG> (ARM, 92 bytes, Stack size 24 bytes, image.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_comp_id
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_type_id
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_arch_id
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genimg_get_os_id
</UL>

<P><STRONG><a name="[160]"></a>__fswab32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, image.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_getimg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_hcrc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_dcrc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_data_size
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_load
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_magic
</UL>

<P><STRONG><a name="[16a]"></a>image_get_load</STRONG> (ARM, 24 bytes, Stack size 8 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_get_load
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
</UL>

<P><STRONG><a name="[162]"></a>image_get_data_size</STRONG> (ARM, 28 bytes, Stack size 8 bytes, image.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = image_get_data_size
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_dcrc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
</UL>

<P><STRONG><a name="[161]"></a>image_get_data</STRONG> (ARM, 112 bytes, Stack size 0 bytes, image.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_getimg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_check_dcrc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_multi_count
</UL>

<P><STRONG><a name="[16b]"></a>image_check_type</STRONG> (ARM, 36 bytes, Stack size 0 bytes, image.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_print_contents
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_get_ramdisk
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_get_ramdisk
</UL>

<P><STRONG><a name="[176]"></a>process_macros</STRONG> (ARM, 592 bytes, Stack size 304 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = process_macros &rArr; getenv &rArr; envmatch &rArr; env_get_char &rArr; env_get_char_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command
</UL>

<P><STRONG><a name="[179]"></a>delete_char</STRONG> (ARM, 248 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delete_char &rArr; putc &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readline_into_buffer
</UL>

<P><STRONG><a name="[17c]"></a>abortboot</STRONG> (ARM, 152 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = abortboot &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tstc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[17d]"></a>abbrev_spec</STRONG> (ARM, 384 bytes, Stack size 56 bytes, cmd_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = abbrev_spec &rArr; simple_strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_protect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
</UL>

<P><STRONG><a name="[17e]"></a>addr_spec</STRONG> (ARM, 416 bytes, Stack size 40 bytes, cmd_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = addr_spec &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_protect
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_flerase
</UL>

<P><STRONG><a name="[17f]"></a>flash_fill_sect_ranges</STRONG> (ARM, 760 bytes, Stack size 48 bytes, cmd_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_fill_sect_ranges &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_protect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sect_erase
</UL>

<P><STRONG><a name="[183]"></a>setup_linux_param</STRONG> (ARM, 108 bytes, Stack size 24 bytes, cmd_boot_zimage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = setup_linux_param &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_zimage
</UL>

<P><STRONG><a name="[185]"></a>BootpCheckPkt</STRONG> (ARM, 216 bytes, Stack size 32 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BootpCheckPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReadLong
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
</UL>

<P><STRONG><a name="[187]"></a>BootpCopyNetParams</STRONG> (ARM, 148 bytes, Stack size 16 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = BootpCopyNetParams &rArr; setenv &rArr; _do_setenv &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_filename
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCopyIP
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setenv
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
</UL>

<P><STRONG><a name="[189]"></a>truncate_sz</STRONG> (ARM, 60 bytes, Stack size 16 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = truncate_sz &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpVendorFieldProcess
</UL>

<P><STRONG><a name="[18a]"></a>BootpVendorFieldProcess</STRONG> (ARM, 840 bytes, Stack size 16 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = BootpVendorFieldProcess &rArr; truncate_sz &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCopyIP
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate_sz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpVendorProcess
</UL>

<P><STRONG><a name="[18d]"></a>BootpVendorProcess</STRONG> (ARM, 104 bytes, Stack size 24 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = BootpVendorProcess &rArr; BootpVendorFieldProcess &rArr; truncate_sz &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpVendorFieldProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
</UL>

<P><STRONG><a name="[1f]"></a>BootpHandler</STRONG> (ARM, 204 bytes, Stack size 32 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6784 + Unknown Stack Size
<LI>Call Chain = BootpHandler &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReadLong
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpVendorProcess
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpCopyNetParams
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpCheckPkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootp.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>BootpExtended</STRONG> (ARM, 136 bytes, Stack size 0 bytes, bootp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
</UL>

<P><STRONG><a name="[1e]"></a>BootpTimeout</STRONG> (ARM, 60 bytes, Stack size 8 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = BootpTimeout &rArr; BootpRequest &rArr; NetSendPacket &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootp.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>__fswab16</STRONG> (ARM, 24 bytes, Stack size 0 bytes, bootp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpVendorFieldProcess
</UL>

<P><STRONG><a name="[18c]"></a>__fswab32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, bootp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpVendorFieldProcess
</UL>

<P><STRONG><a name="[186]"></a>NetReadLong</STRONG> (ARM, 12 bytes, Stack size 0 bytes, bootp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpHandler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpCheckPkt
</UL>

<P><STRONG><a name="[193]"></a>NetWriteIP</STRONG> (ARM, 32 bytes, Stack size 16 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetWriteIP
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpRequest
</UL>

<P><STRONG><a name="[188]"></a>NetCopyIP</STRONG> (ARM, 36 bytes, Stack size 16 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetCopyIP
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpVendorFieldProcess
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootpCopyNetParams
</UL>

<P><STRONG><a name="[21]"></a>startAgainHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, net.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> net.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>startAgainTimeout</STRONG> (ARM, 16 bytes, Stack size 0 bytes, net.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> net.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>net_check_prereq</STRONG> (ARM, 208 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_check_prereq &rArr; puts &rArr; serial_puts &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[199]"></a>__fswab16</STRONG> (ARM, 24 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLAN_to_string
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetEthHdrSize
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_VLAN
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpRequest
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetIP
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetEther
</UL>

<P><STRONG><a name="[1a3]"></a>__fswab32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ip
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_to_string
</UL>

<P><STRONG><a name="[1ae]"></a>NetReadIP</STRONG> (ARM, 36 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetReadIP
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
</UL>

<P><STRONG><a name="[19b]"></a>NetWriteIP</STRONG> (ARM, 32 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetWriteIP
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArpRequest
</UL>

<P><STRONG><a name="[1a5]"></a>NetCopyIP</STRONG> (ARM, 36 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetCopyIP
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetReceive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetIP
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLoop
</UL>

<P><STRONG><a name="[1b1]"></a>TftpSend</STRONG> (ARM, 508 bytes, Stack size 24 bytes, tftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = TftpSend &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetEthHdrSize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTimeout
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
</UL>

<P><STRONG><a name="[22]"></a>TftpTimeout</STRONG> (ARM, 80 bytes, Stack size 8 bytes, tftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = TftpTimeout &rArr; TftpSend &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftp.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TftpHandler</STRONG> (ARM, 1252 bytes, Stack size 64 bytes, tftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = TftpHandler &rArr; TftpSend &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strtoul
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab16
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftp.o(.text)
</UL>
<P><STRONG><a name="[1b2]"></a>__fswab16</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tftp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpHandler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpSend
</UL>

<P><STRONG><a name="[1b4]"></a>basename</STRONG> (ARM, 76 bytes, Stack size 16 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = basename
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirname
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
</UL>

<P><STRONG><a name="[1b5]"></a>dirname</STRONG> (ARM, 44 bytes, Stack size 16 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dirname &rArr; basename
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basename
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
</UL>

<P><STRONG><a name="[1b6]"></a>rpc_add_credentials</STRONG> (ARM, 204 bytes, Stack size 272 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rpc_add_credentials &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_req
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_umountall_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_req
</UL>

<P><STRONG><a name="[1b8]"></a>rpc_req</STRONG> (ARM, 332 bytes, Stack size 2104 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600 + Unknown Stack Size
<LI>Call Chain = rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetEthHdrSize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSendUDPPacket
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_req
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_umountall_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_req
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_lookup_req
</UL>

<P><STRONG><a name="[1b9]"></a>rpc_lookup_req</STRONG> (ARM, 112 bytes, Stack size 80 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2680 + Unknown Stack Size
<LI>Call Chain = rpc_lookup_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
</UL>

<P><STRONG><a name="[1ba]"></a>nfs_mount_req</STRONG> (ARM, 176 bytes, Stack size 4120 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6720 + Unknown Stack Size
<LI>Call Chain = nfs_mount_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_add_credentials
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
</UL>

<P><STRONG><a name="[1bb]"></a>nfs_umountall_req</STRONG> (ARM, 116 bytes, Stack size 4112 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6712 + Unknown Stack Size
<LI>Call Chain = nfs_umountall_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_add_credentials
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
</UL>

<P><STRONG><a name="[1bc]"></a>nfs_readlink_req</STRONG> (ARM, 96 bytes, Stack size 4112 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6712 + Unknown Stack Size
<LI>Call Chain = nfs_readlink_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_add_credentials
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
</UL>

<P><STRONG><a name="[1bd]"></a>nfs_lookup_req</STRONG> (ARM, 196 bytes, Stack size 4120 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6720 + Unknown Stack Size
<LI>Call Chain = nfs_lookup_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_add_credentials
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
</UL>

<P><STRONG><a name="[1be]"></a>nfs_read_req</STRONG> (ARM, 136 bytes, Stack size 4120 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6720 + Unknown Stack Size
<LI>Call Chain = nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_add_credentials
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
</UL>

<P><STRONG><a name="[1bf]"></a>NfsSend</STRONG> (ARM, 200 bytes, Stack size 8 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6728 + Unknown Stack Size
<LI>Call Chain = NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_req
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_umountall_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_req
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_lookup_req
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsTimeout
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
</UL>

<P><STRONG><a name="[1c0]"></a>rpc_lookup_reply</STRONG> (ARM, 200 bytes, Stack size 2064 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = rpc_lookup_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
</UL>

<P><STRONG><a name="[1c1]"></a>nfs_mount_reply</STRONG> (ARM, 172 bytes, Stack size 2064 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = nfs_mount_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
</UL>

<P><STRONG><a name="[1c2]"></a>nfs_umountall_reply</STRONG> (ARM, 156 bytes, Stack size 2064 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = nfs_umountall_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
</UL>

<P><STRONG><a name="[1c3]"></a>nfs_lookup_reply</STRONG> (ARM, 160 bytes, Stack size 2064 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = nfs_lookup_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
</UL>

<P><STRONG><a name="[1c4]"></a>nfs_readlink_reply</STRONG> (ARM, 288 bytes, Stack size 2072 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = nfs_readlink_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
</UL>

<P><STRONG><a name="[1c6]"></a>nfs_read_reply</STRONG> (ARM, 436 bytes, Stack size 2080 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = nfs_read_reply &rArr; putc &rArr; serial_putc &rArr;  serial_putc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fswab32
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsHandler
</UL>

<P><STRONG><a name="[24]"></a>NfsTimeout</STRONG> (ARM, 80 bytes, Stack size 8 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6736 + Unknown Stack Size
<LI>Call Chain = NfsTimeout &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfs.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>NfsHandler</STRONG> (ARM, 844 bytes, Stack size 24 bytes, nfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6752 + Unknown Stack Size
<LI>Call Chain = NfsHandler &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_reply
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_reply
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_reply
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_umountall_reply
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_reply
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_lookup_reply
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsSend
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirname
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basename
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfs.o(.text)
</UL>
<P><STRONG><a name="[1b7]"></a>__fswab32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, nfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_reply
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_readlink_reply
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_reply
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_umountall_reply
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_reply
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_lookup_reply
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_read_req
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_lookup_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfs_mount_req
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_lookup_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpc_add_credentials
</UL>

<P><STRONG><a name="[27]"></a>RarpHandler</STRONG> (ARM, 116 bytes, Stack size 24 bytes, rarp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6776 + Unknown Stack Size
<LI>Call Chain = RarpHandler &rArr; NfsStart &rArr; NfsSend &rArr; nfs_read_req &rArr; rpc_req &rArr; NetSendUDPPacket &rArr; ArpRequest &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getenv
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NfsStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rarp.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>RarpTimeout</STRONG> (ARM, 60 bytes, Stack size 8 bytes, rarp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = RarpTimeout &rArr; RarpRequest &rArr; NetSendPacket &rArr; eth_send &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetStartAgain
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetSetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rarp.o(.text)
</UL>
<P><STRONG><a name="[1c7]"></a>__fswab16</STRONG> (ARM, 24 bytes, Stack size 0 bytes, rarp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RarpRequest
</UL>

<P><STRONG><a name="[2e]"></a>dm9000_outblk_8bit</STRONG> (ARM, 40 bytes, Stack size 0 bytes, dm9000x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>dm9000_outblk_16bit</STRONG> (ARM, 64 bytes, Stack size 4 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dm9000_outblk_16bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>dm9000_outblk_32bit</STRONG> (ARM, 64 bytes, Stack size 4 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dm9000_outblk_32bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>dm9000_inblk_8bit</STRONG> (ARM, 40 bytes, Stack size 0 bytes, dm9000x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>dm9000_inblk_16bit</STRONG> (ARM, 64 bytes, Stack size 4 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dm9000_inblk_16bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>dm9000_inblk_32bit</STRONG> (ARM, 64 bytes, Stack size 4 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dm9000_inblk_32bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>dm9000_rx_status_32bit</STRONG> (ARM, 36 bytes, Stack size 0 bytes, dm9000x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>dm9000_rx_status_16bit</STRONG> (ARM, 40 bytes, Stack size 0 bytes, dm9000x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>dm9000_rx_status_8bit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, dm9000x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dm9000x.o(.text)
</UL>
<P><STRONG><a name="[1c9]"></a>DM9000_ior</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dm9000x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_srom_word
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_reset
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_read
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_probe
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[1c8]"></a>dm9000_probe</STRONG> (ARM, 116 bytes, Stack size 8 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = dm9000_probe &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ior
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[1cb]"></a>DM9000_iow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dm9000x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_srom_word
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_srom_word
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9000_reset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_nic
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_read
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PHY_mode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_halt
</UL>

<P><STRONG><a name="[1ca]"></a>phy_write</STRONG> (ARM, 96 bytes, Stack size 16 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = phy_write &rArr; udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_dm9802
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_dm9801
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PHY_mode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_halt
</UL>

<P><STRONG><a name="[1cc]"></a>set_PHY_mode</STRONG> (ARM, 200 bytes, Stack size 16 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = set_PHY_mode &rArr; phy_write &rArr; udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[1cd]"></a>phy_read</STRONG> (ARM, 92 bytes, Stack size 16 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = phy_read &rArr; udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ior
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_nic
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_dm9802
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_dm9801
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[1ce]"></a>program_dm9801</STRONG> (ARM, 432 bytes, Stack size 24 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = program_dm9801 &rArr; phy_read &rArr; udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_nic
</UL>

<P><STRONG><a name="[1cf]"></a>program_dm9802</STRONG> (ARM, 84 bytes, Stack size 8 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = program_dm9802 &rArr; phy_read &rArr; udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;identify_nic
</UL>

<P><STRONG><a name="[1d0]"></a>identify_nic</STRONG> (ARM, 144 bytes, Stack size 16 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = identify_nic &rArr; program_dm9801 &rArr; phy_read &rArr; udelay &rArr; get_timer &rArr; get_timer_masked
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_dm9802
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_dm9801
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[1d1]"></a>dm9000_reset</STRONG> (ARM, 176 bytes, Stack size 8 bytes, dm9000x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = dm9000_reset &rArr; printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_iow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_ior
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_init
</UL>

<P><STRONG><a name="[20a]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[209]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[208]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[20b]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[32]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[1f9]"></a>_fp_digits</STRONG> (Thumb, 410 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via Veneer)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[1f1]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[203]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
